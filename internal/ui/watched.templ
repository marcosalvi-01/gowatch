package ui

import (
	"fmt"

	"gowatch/internal/models"
	"gowatch/internal/ui/components/icon"
	"gowatch/internal/ui/components/moviecard"
	"gowatch/internal/ui/components/page"
	"strconv"
)

templ WatchedPage(days []models.WatchedMoviesInDay) {
	@page.Page(page.Props{
		Title:       "Gowatch",
		Name:        "Watched Movies",
		CurrentPath: "/watched",
	}) {
		<div class="flex flex-wrap gap-x-6 gap-y-4">
			for _, day := range days {
				<section
					class="flex-shrink-0 p-2 md:p-4 rounded-lg space-y-2"
					style={ "background:hsl(" + fmt.Sprint(day.Date.YearDay()*137%360) + ",100%,85%)" }
				>
					<h2 class="text-md font-medium tracking-wide text-black">
						{ day.Date.Format("Mon 02 Jan 2006") }
					</h2>
					<div class="flex flex-wrap gap-6 w-full">
						for _, movie := range day.Movies {
							@moviecard.MovieCard(moviecard.Props{
								Title:      movie.Movie.Title,
								Href:       "/movie/" + strconv.Itoa(int(movie.Movie.ID)),
								PosterPath: movie.Movie.PosterPath,
								Hoverable:  true,
							}) {
								<h3 class="mb-1 text-xs md:text-sm font-bold leading-tight">{ movie.Movie.Title }</h3>
								<div class="flex items-center justify-between">
									<div class="flex items-center">
										@icon.Calendar(icon.Props{Size: 12})
										<p class="ml-2 text-xs opacity-90">{ movie.Movie.ReleaseDate.Format("2006") }</p>
									</div>
									if movie.Movie.VoteAverage > 0 {
										<div class="flex items-center">
											@icon.Star(icon.Props{
												Size:   12,
												Fill:   "orange",
												Stroke: "orange",
											})
											<span class="ml-1 text-xs">{ fmt.Sprintf("%.1f", movie.Movie.VoteAverage) }</span>
										</div>
									}
								</div>
							}
						}
					</div>
				</section>
			}
		</div>
	}
}
