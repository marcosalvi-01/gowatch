package pages

import (
	"fmt"
	"gowatch/internal/models"
	"gowatch/internal/ui/components/moviecard"
	"gowatch/internal/ui/templui/icon"
	"gowatch/internal/ui/templui/skeleton"
	"strconv"
)

templ Watched(days []models.WatchedMoviesInDay) {
	@Layout() {
		@templ.Fragment("content") {
			{{
				watchedCount := 0
				for _, day := range days {
					watchedCount += len(day.Movies)
				}
			}}
			<div class="flex flex-row justify-between">
				<p class="text-lg md:text-xl mb-4">Watched Movies</p>
				<p class="text-lg md:text-xl mb-4" hx-trigger="newWatched from:body" hx-get="/htmx/watchedCount">
					<span>
						{ watchedCount }
					</span>
				</p>
			</div>
			<div class="flex flex-wrap gap-4 md:gap-6">
				for _, day := range days {
					<section class="p-3 sm:p-4 rounded-lg space-y-2 border border-border bg-card">
						<h2 class="text-sm md:text-lg font-semibold tracking-wide text-foreground">
							{ day.Date.Format("Mon 02 Jan 2006") }
						</h2>
						<div class="flex justify-center">
							<div class="flex flex-wrap gap-2 md:gap-4">
								for _, movie := range day.Movies {
									{{
										moviecardProps := moviecard.Props{
											Title:      movie.MovieDetails.Movie.Title,
											Href:       "/movie/" + strconv.Itoa(int(movie.MovieDetails.Movie.ID)),
											PosterPath: movie.MovieDetails.Movie.PosterPath,
											Hoverable:  true,
										}
										if movie.InTheaters {
											moviecardProps.TopHoverComponent = movieCardTopHover(movie.InTheaters)
										}
									}}
									@moviecard.MovieCard(moviecardProps) {
										<h3 class="mb-1 text-xs md:text-sm font-bold leading-tight">{ movie.MovieDetails.Movie.Title }</h3>
										<div class="flex items-center justify-between">
											<div class="flex items-center">
												@icon.Calendar(icon.Props{Size: 12})
												<p class="ml-2 text-xs opacity-90">{ movie.MovieDetails.Movie.ReleaseDate.Format("2006") }</p>
											</div>
											if movie.MovieDetails.Movie.VoteAverage > 0 {
												<div class="flex items-center">
													@icon.Star(icon.Props{
														Size:   12,
														Fill:   "orange",
														Stroke: "orange",
													})
													<span class="ml-1 text-xs">{ fmt.Sprintf("%.1f", movie.MovieDetails.Movie.VoteAverage) }</span>
												</div>
											}
										</div>
									}
								}
							</div>
						</div>
					</section>
				}
			</div>
		}
	}
}

templ movieCardTopHover(inTheater bool) {
	<div class="flex items-center gap-3 text-sm text-white">
		if inTheater {
			@icon.Popcorn(icon.Props{
				Size:  14,
				Color: "white",
			})
			In Theater
		}
	</div>
}

templ WatchedLoading() {
	<div id="watched-loading" class="htmx-indicator absolute inset-0 bg-background z-5 pointer-events-none overflow-hidden">
		<div class="p-4 space-y-6">
			// Page title
			<div class="flex flex-row justify-between">
				@skeleton.Skeleton(skeleton.Props{Class: "h-6 w-48 rounded-lg"})
				@skeleton.Skeleton(skeleton.Props{Class: "h-6 w-24 rounded-lg"})
			</div>
			// Watched list
			<div class="flex flex-wrap gap-2 sm:gap-4">
				{{ groupSizes := []int{4, 2, 3, 5, 1, 3, 2, 4} }}
				for _, size := range groupSizes {
					<section class="p-2 md:p-4 rounded-lg space-y-2 border border-border bg-card">
						<h2 class="text-lg font-semibold tracking-wide text-foreground">
							@skeleton.Skeleton(skeleton.Props{Class: "h-4 w-32 rounded"})
						</h2>
						<div class="flex flex-wrap gap-4">
							for j := 0; j < size; j++ {
								<div class="flex flex-col space-y-2 p-2">
									@skeleton.Skeleton(skeleton.Props{Class: "h-48 w-32 rounded"})
									<div class="space-y-1">
										@skeleton.Skeleton(skeleton.Props{Class: "h-3 w-20 rounded"})
										@skeleton.Skeleton(skeleton.Props{Class: "h-3 w-16 rounded"})
										@skeleton.Skeleton(skeleton.Props{Class: "h-3 w-12 rounded"})
									</div>
								</div>
							}
						</div>
					</section>
				}
			</div>
		</div>
	</div>
}
