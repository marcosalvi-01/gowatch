package pages

import (
	"gowatch/internal/ui/components/sidebar"
	"gowatch/internal/ui/templui/button"
	"gowatch/internal/ui/templui/dialog"
	"gowatch/internal/ui/templui/icon"
	"gowatch/internal/ui/templui/popover"
	templSidebar "gowatch/internal/ui/templui/sidebar"
	"gowatch/internal/ui/templui/skeleton"
)

templ Layout(currentPage string) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="utf-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>Gowatch</title>
			<link rel="stylesheet" href="/static/css/output.css"/>
			@Scripts()
			@Favicons()
		</head>
		<body class="bg-background">
			@templSidebar.Layout(templSidebar.LayoutProps{
				Class: "w-full h-screen",
			}) {
				<div id="sidebar-content" hx-get="/htmx/sidebar" hx-target="this" hx-swap="innerHTML" hx-trigger="load">
					@sidebar.SidebarLoading(false)
				</div>
				@templSidebar.Inset() {
					<div id="toast"></div>
					// Header
					<div class="flex items-center gap-2 p-2 flex-shrink-0 sticky z-10 top-0 border-b-1 bg-background">
						<div class="md:hidden">
							@templSidebar.Trigger(templSidebar.TriggerProps{
								Target: "sidebar",
							})
						</div>
						// @SearchBar(props.SearchContent)
						@ThemeSwitcher()
					</div>
					// Main content
					<div id="page-container" class="flex-1 p-4 overflow-auto">
						{ children... }
					</div>
				}
			}
		</body>
	</html>
}

templ ThemeSwitcher() {
	@button.Button(button.Props{
		Variant: button.VariantGhost,
		Size:    button.SizeIcon,
		Attributes: templ.Attributes{
			"onclick":    "toggleTheme()",
			"aria-label": "Toggle theme",
		},
	}) {
		@icon.Moon(icon.Props{Class: "dark:hidden"})
		@icon.Sun(icon.Props{Class: "hidden dark:inline-block"})
	}
}

templ Scripts() {
	<script src="https://cdn.jsdelivr.net/npm/htmx.org@2.0.6/dist/htmx.min.js" integrity="sha384-Akqfrbj/HpNVo8k11SXBb6TlBWmXXlYQrCSqEWmyKJe+hDm3Z/B2WVG4smwBkRVm" crossorigin="anonymous"></script>
	<script>
	  document.addEventListener("DOMContentLoaded", () => {
		// Re-initialize templUI components after HTMX swaps
		document.body.addEventListener("htmx:afterSwap", (e) => {
		  if (window.templUI) {
			Object.values(window.templUI).forEach(comp => {
			  comp.init?.(e.detail.elt);
			});
		  }
		});

		// Re-initialize components after out-of-band swaps
		document.body.addEventListener("htmx:oobAfterSwap", (e) => {
		  if (window.templUI) {
			Object.values(window.templUI).forEach(comp => {
			  comp.init?.(e.detail.target);
			});
		  }
		});

		// Update sidebar active state on navigation
		document.body.addEventListener("htmx:afterRequest", (e) => {
		  // Check if this element has data-page attribute
		  const page = e.detail.elt.getAttribute("data-page");
		  if (page) {
			// Find all menu buttons with data-page
			document.querySelectorAll("[data-tui-sidebar=menu-button][data-page]").forEach(btn => {
			  // Remove active state
			  btn.removeAttribute("data-tui-sidebar-active");
			});
			
			// Add active state to clicked button
			e.detail.elt.setAttribute("data-tui-sidebar-active", "true");
		  }
		});
	});
	</script>
	@ThemeScript()
	// for the sidebar
	@templSidebar.Script()
	@popover.Script()
	@dialog.Script()
	// @toast.Script()
	// @dropdown.Script()
	// // for the list of lists in the sidebar
	// @collapsible.Script()
	// // for the new list modal
	// @modal.Script()
	// // for the search bar
	// @input.Script()
}

templ ThemeScript() {
	<script>
	(() => {
	  const root = document.documentElement;
	  const saved = localStorage.getItem('theme');
	  const shouldBeDark = saved ? saved === 'dark' : true;
	  if (shouldBeDark) {
	    root.classList.add('dark');
	  }
	  window.toggleTheme = () => {
	    const isDark = root.classList.toggle('dark');
	    localStorage.setItem('theme', isDark ? 'dark' : 'light');
	  };
	})();
	</script>
}

templ Favicons() {
	<link rel="icon" type="image/svg+xml" href="/static/favicon.svg"/>
	<meta name="theme-color" content="#ffffff"/>
}

templ skeletonDashboard() {
	<div>
		<div class="grid gap-6 md:grid-cols-3">
			for i := 0; i < 3; i++ {
				<div class="p-4">
					@skeleton.Skeleton(skeleton.Props{Class: "h-4 w-20 mb-2"})
					@skeleton.Skeleton(skeleton.Props{Class: "h-8 w-24 mb-4"})
					<div class="flex items-center gap-2">
						@skeleton.Skeleton(skeleton.Props{Class: "h-4 w-12"})
						@skeleton.Skeleton(skeleton.Props{Class: "h-4 w-4"})
					</div>
				</div>
			}
		</div>
		<div class="mt-4 p-4">
			@skeleton.Skeleton(skeleton.Props{Class: "h-5 w-1/3 mb-6"})
			@skeleton.Skeleton(skeleton.Props{Class: "h-[240px] w-full rounded-md"})
		</div>
	</div>
}
