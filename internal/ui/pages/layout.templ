// Package pages contains templated page layouts and views for the web interface.
package pages

import (
	"gowatch/internal/ui/components/sidebar"
	"gowatch/internal/ui/templui/avatar"
	"gowatch/internal/ui/templui/button"
	"gowatch/internal/ui/templui/calendar"
	"gowatch/internal/ui/templui/chart"
	"gowatch/internal/ui/templui/collapsible"
	"gowatch/internal/ui/templui/datepicker"
	"gowatch/internal/ui/templui/dialog"
	"gowatch/internal/ui/templui/icon"
	"gowatch/internal/ui/templui/input"
	"gowatch/internal/ui/templui/popover"
	templSidebar "gowatch/internal/ui/templui/sidebar"
	"gowatch/internal/ui/templui/skeleton"
	"gowatch/internal/ui/templui/textarea"
	"gowatch/internal/ui/templui/toast"
)

templ Layout() {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="utf-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>Gowatch</title>
			<link rel="stylesheet" href="/static/css/output.css"/>
			@Scripts()
			@Favicons()
		</head>
		<body class="bg-background">
			@templSidebar.Layout(templSidebar.LayoutProps{
				Class: "w-full h-screen",
			}) {
				// by default show a loading version, when loading get the real sidebar content
				<div id="sidebar-content" hx-get="/htmx/sidebar" hx-target="this" hx-swap="innerHTML" hx-trigger="refreshSidebar from:body, load">
					@sidebar.SidebarLoading(false)
				</div>
				@templSidebar.Inset() {
					<div id="toast"></div>
					// Header
					<div class="flex items-center gap-2 p-2 flex-shrink-0 sticky z-10 top-0 border-b-1 bg-background">
						<div class="md:hidden">
							@templSidebar.Trigger(templSidebar.TriggerProps{
								Target: "sidebar",
							})
						</div>
						@SearchBar("")
						@ThemeSwitcher()
					</div>
					<div class="relative overflow-auto">
						@HomeLoading()
						@WatchedLoading()
						@StatsLoading()
						@MovieLoading()
						@SearchLoading()
						@ListLoading()
						<div id="main-scroll-container" class="flex flex-1 flex-col overflow-auto">
							<div id="main-content" class="p-4">
								{ children... }
							</div>
						</div>
					</div>
				}
			}
		</body>
	</html>
}

templ mainContentLoading() {
	<div id="main-content-loading" class="htmx-indicator absolute inset-0 bg-background z-5 pointer-events-none">
		<div class="flex flex-col justify-center items-center h-full p-8">
			<div class="w-full max-w-3xl space-y-6">
				// Page title
				<div class="space-y-2">
					@skeleton.Skeleton(skeleton.Props{Class: "h-8 w-48 rounded-lg"})
					@skeleton.Skeleton(skeleton.Props{Class: "h-4 w-64 rounded-md"})
				</div>
				// Main content blocks
				<div class="space-y-4 pt-4">
					@skeleton.Skeleton(skeleton.Props{Class: "h-24 w-full rounded-lg"})
					@skeleton.Skeleton(skeleton.Props{Class: "h-24 w-full rounded-lg"})
					@skeleton.Skeleton(skeleton.Props{Class: "h-24 w-full rounded-lg"})
					@skeleton.Skeleton(skeleton.Props{Class: "h-24 w-full rounded-lg"})
				</div>
				// Bottom action area
				<div class="flex justify-between items-center pt-6">
					@skeleton.Skeleton(skeleton.Props{Class: "h-4 w-24 rounded-md"})
					@skeleton.Skeleton(skeleton.Props{Class: "h-10 w-28 rounded-lg"})
				</div>
			</div>
		</div>
	</div>
}

templ ThemeSwitcher() {
	@button.Button(button.Props{
		Variant: button.VariantGhost,
		Size:    button.SizeIcon,
		Attributes: templ.Attributes{
			"onclick":    "toggleTheme()",
			"aria-label": "Toggle theme",
		},
	}) {
		@icon.Moon(icon.Props{Class: "dark:hidden"})
		@icon.Sun(icon.Props{Class: "hidden dark:inline-block"})
	}
}

templ Scripts() {
	<script src="https://cdn.jsdelivr.net/npm/htmx.org@2.0.6/dist/htmx.min.js" integrity="sha384-Akqfrbj/HpNVo8k11SXBb6TlBWmXXlYQrCSqEWmyKJe+hDm3Z/B2WVG4smwBkRVm" crossorigin="anonymous"></script>
	<script>
	  document.addEventListener("DOMContentLoaded", () => {
		// Re-initialize templUI components after HTMX swaps
		document.body.addEventListener("htmx:afterSwap", (e) => {
		  if (window.templUI) {
			Object.values(window.templUI).forEach(comp => {
			  comp.init?.(e.detail.elt);
			});
		  }
		});

		// Re-initialize components after out-of-band swaps
		document.body.addEventListener("htmx:oobAfterSwap", (e) => {
		  if (window.templUI) {
			Object.values(window.templUI).forEach(comp => {
			  comp.init?.(e.detail.target);
			});
		  }
		});
	});
	</script>
	@SidebarNavigationScript()
	@ThemeScript()
	// for the sidebar
	@templSidebar.Script()
	@popover.Script()
	@dialog.Script()
	@avatar.Script()
	@dialog.Script()
	@datepicker.Script()
	@calendar.Script()
	@toast.Script()
	@collapsible.Script()
	@textarea.Script()
	@chart.Script()
}

templ SidebarNavigationScript() {
	<script>
	// Sidebar Navigation Active State Handler
	// This script uses a simple, explicit approach: store the target URL directly on each navigation item
	document.addEventListener("DOMContentLoaded", () => {
	  // Function to update active state based on current URL
	  function updateSidebarActiveState(url = window.location.pathname) {
		// Find all navigation items (both main menu and sub-menu)
		const allNavButtons = document.querySelectorAll(
		  "[data-tui-sidebar=menu-button][data-nav-url], [data-tui-sidebar=menu-sub-button][data-nav-url]"
		);

		// Remove active state from all buttons
		allNavButtons.forEach(btn => {
		  btn.removeAttribute("data-tui-sidebar-active");
		});

		// Find and activate the matching button(s)
		allNavButtons.forEach(btn => {
		  const navUrl = btn.getAttribute("data-nav-url");

		  if (navUrl === url) {
			btn.setAttribute("data-tui-sidebar-active", "true");
		  }
		});
	  }

	  // Set initial active state on page load
	  updateSidebarActiveState();

	  // Update active state after HTMX navigation completes
	  document.body.addEventListener("htmx:afterSwap", (e) => {
		// Only update if the swap was for main content
		if (e.detail.target &&
			(e.detail.target.id === "main-content" ||
			 e.detail.target.closest("#main-content"))) {
		  // Use the URL from the request or current location
		  const newUrl = e.detail.pathInfo?.requestPath || window.location.pathname;
		  updateSidebarActiveState(newUrl);
		}
	  });

	  // Handle browser back/forward navigation
	  window.addEventListener("popstate", () => {
		updateSidebarActiveState();
	  });

	  // Handle direct clicks for immediate visual feedback
	  document.body.addEventListener("click", (e) => {
		const navButton = e.target.closest("[data-nav-url]");

		if (navButton) {
		  const targetUrl = navButton.getAttribute("data-nav-url");
		  if (targetUrl) {
			updateSidebarActiveState(targetUrl);
		  }
		}
	  });

	  // Re-apply active state after sidebar content refresh
	  document.body.addEventListener("htmx:afterSwap", (e) => {
		if (e.detail.target && e.detail.target.id === "sidebar-content") {
		  updateSidebarActiveState();
		}
	  });
	});
	</script>
}

templ ThemeScript() {
	<script>
	(() => {
	  const root = document.documentElement;
	  const saved = localStorage.getItem('theme');
	  const shouldBeDark = saved ? saved === 'dark' : true;
	  if (shouldBeDark) {
	    root.classList.add('dark');
	  }
	  window.toggleTheme = () => {
	    const isDark = root.classList.toggle('dark');
	    localStorage.setItem('theme', isDark ? 'dark' : 'light');
	  };
	})();
	</script>
}

templ Favicons() {
	<link rel="icon" type="image/svg+xml" href="/static/favicon.svg"/>
	<meta name="theme-color" content="#ffffff"/>
}

templ skeletonDashboard() {
	<div>
		<div class="grid gap-6 md:grid-cols-3">
			for i := 0; i < 3; i++ {
				<div class="p-4">
					@skeleton.Skeleton(skeleton.Props{Class: "h-4 w-20 mb-2"})
					@skeleton.Skeleton(skeleton.Props{Class: "h-8 w-24 mb-4"})
					<div class="flex items-center gap-2">
						@skeleton.Skeleton(skeleton.Props{Class: "h-4 w-12"})
						@skeleton.Skeleton(skeleton.Props{Class: "h-4 w-4"})
					</div>
				</div>
			}
		</div>
		<div class="mt-4 p-4">
			@skeleton.Skeleton(skeleton.Props{Class: "h-5 w-1/3 mb-6"})
			@skeleton.Skeleton(skeleton.Props{Class: "h-[240px] w-full rounded-md"})
		</div>
	</div>
}

templ SearchBar(searchContent string) {
	<div class="relative flex items-center w-full">
		@icon.Search(icon.Props{
			Class: "absolute left-3 text-muted-foreground",
			Size:  20,
		})
		@input.Input(input.Props{
			Type:        input.TypeSearch,
			Placeholder: "Search Movies...",
			Class:       "pl-10",
			Value:       searchContent,
			Name:        "q",
			Attributes: templ.Attributes{
				"hx-get":       "/search",
				"hx-trigger":   "keyup[key=='Enter']",
				"hx-target":    "#main-content",
				"hx-swap":      "innerHTML scroll:#main-scroll-container:top",
				"hx-push-url":  "true",
				"hx-include":   "this",
				"hx-indicator": "#search-loading",
			},
		})
	</div>
}
