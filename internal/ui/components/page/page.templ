package page

import (
	"fmt"
	"gowatch/internal/models"
	"gowatch/internal/ui/components/avatar"
	"gowatch/internal/ui/components/button"
	"gowatch/internal/ui/components/collapsible"
	"gowatch/internal/ui/components/drawer"
	"gowatch/internal/ui/components/dropdown"
	"gowatch/internal/ui/components/form"
	"gowatch/internal/ui/components/icon"
	"gowatch/internal/ui/components/input"
	"gowatch/internal/ui/components/modal"
	"gowatch/internal/ui/components/sheet"
	"gowatch/internal/ui/components/sidebar"
	"gowatch/internal/ui/components/textarea"
	"gowatch/internal/ui/components/toast"
)

type Props struct {
	Title         string
	Name          string
	CurrentPath   string
	SearchContent string
	Lists         []models.ListEntry
}

templ Page(props Props, extraHead ...templ.Component) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="utf-8"/>
			<title>{ props.Title }</title>
			<link rel="stylesheet" href="/static/css/output.css"/>
			@Scripts()
			for _, h := range extraHead {
				@h
			}
			@Favicons()
		</head>
		<body class="bg-background overflow-hidden">
			@sidebar.Layout(sidebar.LayoutProps{
				Class: "w-full",
			}) {
				@Sidebar(props.Title, props.CurrentPath, props.Lists, false)
				@sidebar.Inset(sidebar.InsetProps{}) {
					<div id="toast"></div>
					// Header
					<div class="flex items-center p-2 flex-shrink-0">
						<div class="md:hidden mr-2">
							@sidebar.Trigger()
						</div>
						@SearchBar(props.SearchContent)
						@ThemeSwitcher()
					</div>
					// Main content
					<div class="flex-1 overflow-auto p-4 border-t-1">
						if props.Name != "" {
							<h1 class="text-xl mb-4">{ props.Name }</h1>
						}
						{ children... }
						@modal.Modal(modal.Props{
							ID:    "add-list-modal",
							Class: "max-w-md",
						}) {
							<form
								hx-post="/htmx/lists/create"
								hx-target="#toast"
							>
								@modal.Header() {
									Create New List
								}
								@modal.Body() {
									<div class="space-y-4">
										<div class="space-y-2">
											@form.Item() {
												@form.Label(form.LabelProps{
													For: "add-list-name-input",
												}) {
													Give a name to the list
												}
												@input.Input(input.Props{
													ID:          "add-list-input",
													Required:    true,
													Placeholder: "A cool name",
													Name:        "title",
												})
											}
											@form.Label(form.LabelProps{
												For: "add-list-description-input",
											}) {
												Give the list a description
											}
											@textarea.Textarea(textarea.Props{
												ID:          "add-list-description-input",
												Placeholder: "A list of funny movies",
												Required:    false,
												Name:        "description",
											})
											<input type="hidden" name="currentPath" value={ props.CurrentPath }/>
										</div>
									</div>
								}
								@modal.Footer() {
									<div class="flex justify-end gap-3">
										@modal.Close(modal.CloseProps{
											For: "add-list-modal",
										}) {
											@button.Button(button.Props{
												Variant: button.VariantOutline,
											}) {
												Cancel
											}
										}
										@modal.Close(modal.CloseProps{
											For: "add-list-modal",
										}) {
											@button.Button(button.Props{
												Variant: button.VariantDefault,
												Type:    button.TypeSubmit,
											}) {
												Create List
											}
										}
									</div>
								}
							</form>
						}
					</div>
				}
			}
		</body>
	</html>
}

templ ThemeSwitcher() {
	@button.Button(button.Props{
		Variant: button.VariantGhost,
		Size:    button.SizeIcon,
		Attributes: templ.Attributes{
			"onclick":    "toggleTheme()",
			"aria-label": "Toggle theme",
		},
	}) {
		@icon.Moon(icon.Props{Class: "dark:hidden"})
		@icon.Sun(icon.Props{Class: "hidden dark:inline-block"})
	}
}

templ SearchBar(searchContent string) {
	<div class="relative flex items-center w-full">
		@icon.Search(icon.Props{
			Class: "absolute left-3 text-muted-foreground",
			Size:  20,
		})
		@input.Input(input.Props{
			Type:        input.TypeSearch,
			Placeholder: "Search Movies...",
			Class:       "pl-10",
			Value:       searchContent,
			Name:        "q",
			Attributes: templ.Attributes{
				"hx-get":      "/search",
				"hx-trigger":  "keyup[key=='Enter']",
				"hx-target":   "body",
				"hx-push-url": "true",
				"hx-include":  "this",
			},
		})
	</div>
}

templ Sidebar(title string, currentPath string, lists []models.ListEntry, collapsed bool) {
	@sidebar.Sidebar(sidebar.Props{
		Class:       "bg-background border-r-1",
		Collapsible: sidebar.CollapsibleIcon,
		Variant:     sidebar.VariantInset,
		Collapsed:   collapsed,
	}) {
		@sidebar.Header() {
			@drawer.Title(drawer.TitleProps{
				Class: "flex items-center gap-2 text-2xl font-semibold",
			}) {
				<img src="/static/favicon.svg" alt="App Logo" class="w-20 h-20"/>
				{ title }
			}
		}
		@sidebar.Content() {
			@sidebar.Group() {
				@sidebar.Menu() {
					@sidebar.MenuItem() {
						@sidebar.MenuButton(sidebar.MenuButtonProps{
							Href:     "/home",
							Tooltip:  "Home",
							IsActive: currentPath == "/home",
						}) {
							@icon.House(icon.Props{Class: "size-4"})
							<span>Home</span>
						}
					}
					@sidebar.MenuItem() {
						@sidebar.MenuButton(sidebar.MenuButtonProps{
							Href:     "/watched",
							Tooltip:  "Watched",
							IsActive: currentPath == "/watched",
						}) {
							@icon.Film(icon.Props{Class: "size-4"})
							<span>Watched</span>
							@sidebar.MenuBadge() {
								// TODO watched movie count
								3
							}
						}
					}
				}
			}
			@sidebar.Separator()
			@sidebar.Group() {
				@sidebar.Menu() {
					@sidebar.MenuItem() {
						@collapsible.Collapsible(collapsible.Props{
							Open:  true,
							Class: "group/collapsible w-full",
						}) {
							@collapsible.Trigger() {
								@sidebar.MenuButton(sidebar.MenuButtonProps{
									Tooltip: "Lists",
								}) {
									@icon.List(icon.Props{Class: "size-4"})
									<span>Lists</span>
									@icon.ChevronRight(icon.Props{
										Class: "ml-auto size-4 transition-transform group-data-[tui-collapsible-state=open]/collapsible:rotate-90",
									})
								}
							}
							@collapsible.Content() {
								@sidebar.MenuSub() {
									<ul hx-get="/htmx/lists" hx-trigger="newList from:body">
										@SidebarListsList(currentPath, lists)
									</ul>
									@sidebar.MenuSubItem() {
										@modal.Trigger(modal.TriggerProps{
											For: "add-list-modal",
										}) {
											@sidebar.MenuSubButton() {
												@icon.Plus(icon.Props{
													Size: 18,
												})
												New List
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		@sidebar.Footer() {
			@sidebar.Menu() {
				@sidebar.MenuItem() {
					@dropdown.Dropdown() {
						@dropdown.Trigger() {
							@sidebar.MenuButton(sidebar.MenuButtonProps{
								Size: sidebar.MenuButtonSizeLg,
							}) {
								@avatar.Avatar(avatar.Props{Class: "size-8 rounded-lg"}) {
									@avatar.Image(avatar.ImageProps{
										Src: "https://avatars.githubusercontent.com/u/26936893?v=4",
									})
								}
								<div class="grid flex-1 text-left text-sm leading-tight">
									<span class="truncate font-medium">John Doe</span>
									<span class="truncate text-xs">john@example.com</span>
								</div>
								@icon.ChevronsUpDown(icon.Props{Class: "ml-auto size-4"})
							}
						}
						@dropdown.Content(dropdown.ContentProps{
							Width:     "w-56",
							Placement: dropdown.PlacementTopStart,
						}) {
							@dropdown.Label() {
								John Doe
							}
							@dropdown.Separator()
							@dropdown.Item() {
								<span class="flex items-center">
									@icon.User(icon.Props{Size: 16, Class: "mr-2"})
									Profile
								</span>
							}
							@dropdown.Item() {
								<span class="flex items-center">
									@icon.Settings(icon.Props{Size: 16, Class: "mr-2"})
									Settings
								</span>
							}
							@dropdown.Separator()
							@dropdown.Item() {
								<span class="flex items-center">
									@icon.LogOut(icon.Props{Size: 16, Class: "mr-2"})
									Log out
								</span>
							}
						}
					}
				}
			}
		}
	}
}

templ SidebarListsList(currentPath string, lists []models.ListEntry) {
	for _, list := range lists {
		@sidebar.MenuSubItem() {
			@sidebar.MenuSubButton(sidebar.MenuSubButtonProps{
				Href:     "/list/" + fmt.Sprintf("%d", list.ID),
				IsActive: currentPath == "/list/"+fmt.Sprintf("%d", list.ID),
			}) {
				<span>{ list.Name }</span>
			}
		}
	}
}

// scripts.templ
templ Scripts() {
	<script src="https://cdn.jsdelivr.net/npm/htmx.org@2.0.6/dist/htmx.min.js" integrity="sha384-Akqfrbj/HpNVo8k11SXBb6TlBWmXXlYQrCSqEWmyKJe+hDm3Z/B2WVG4smwBkRVm" crossorigin="anonymous"></script>
	<script>
	  document.addEventListener("DOMContentLoaded", () => {
		// Re-initialize templUI components after HTMX swaps
		document.body.addEventListener("htmx:afterSwap", (e) => {
		  if (window.templUI) {
			Object.values(window.templUI).forEach(comp => {
			  comp.init?.(e.detail.elt);
			});
		  }
		});

		// Re-initialize components after out-of-band swaps
		document.body.addEventListener("htmx:oobAfterSwap", (e) => {
		  if (window.templUI) {
			Object.values(window.templUI).forEach(comp => {
			  comp.init?.(e.detail.target);
			});
		  }
		});
	  });
	</script>
	@ThemeScript()
	@drawer.Script()
	@input.Script()
	@modal.Script()
	@toast.Script()
	@sidebar.Script()
	@sheet.Script()
	@dropdown.Script()
	@collapsible.Script()
}

templ ThemeScript() {
	<script>
	(() => {
	  const root = document.documentElement;
	  const saved = localStorage.getItem('theme');
	  const shouldBeDark = saved ? saved === 'dark' : true;
	  if (shouldBeDark) {
	    root.classList.add('dark');
	  }
	  window.toggleTheme = () => {
	    const isDark = root.classList.toggle('dark');
	    localStorage.setItem('theme', isDark ? 'dark' : 'light');
	  };
	})();
	</script>
}

templ Favicons() {
	<link rel="icon" type="image/svg+xml" href="/static/favicon.svg"/>
	<meta name="theme-color" content="#ffffff"/>
}
