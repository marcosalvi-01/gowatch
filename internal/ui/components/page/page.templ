package page

import (
	"gowatch/internal/ui/components/button"
	"gowatch/internal/ui/components/drawer"
	"gowatch/internal/ui/components/icon"
	"gowatch/internal/ui/components/input"
)

type Props struct {
	Title         string
	Name          string
	CurrentPath   string
	SearchContent string
}

templ Page(props Props, extraHead ...templ.Component) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="utf-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>{ props.Title }</title>
			<link rel="stylesheet" href="/static/css/output.css"/>
			@Scripts()
			for _, h := range extraHead {
				@h
			}
			@Favicons()
		</head>
		<body class="bg-background flex flex-col md:flex-row h-screen overflow-hidden">
			// Navigation Drawer only shown on desktop
			<div class="hidden md:flex md:w-64 md:flex-shrink-0 md:flex-col p-4 border-r-1">
				@NavigationDrawer(props.Title, props.CurrentPath)
			</div>
			@DrawerDefault(props.Title, props.CurrentPath)
			// Main content area with fixed header and scrollable content
			<div class="flex-1 flex flex-col min-w-0 h-full md:h-auto">
				// Header 
				<div class="flex items-center justify-between p-4 border-b flex-shrink-0">
					<div class="flex items-center w-full">
						// Mobile Navigation Drawer trigger
						@drawer.Trigger(drawer.TriggerProps{
							For:   "default-drawer",
							Class: "md:hidden mr-3",
						}) {
							@button.Button(button.Props{
								Variant: button.VariantOutline,
							}) {
								@icon.Menu()
							}
						}
						@SearchBar(props.SearchContent)
					</div>
					<div class="items-center">
						@button.Button(button.Props{
							Variant: button.VariantGhost,
							Size:    button.SizeIcon,
							Attributes: templ.Attributes{
								"onclick":    "toggleTheme()",
								"aria-label": "Toggle theme",
							},
						}) {
							@icon.Moon(icon.Props{Class: "dark:hidden"})
							@icon.Sun(icon.Props{Class: "hidden dark:inline-block"})
						}
					</div>
				</div>
				// Scrollable Main content area
				<div class="flex-1 overflow-auto p-4">
					if props.Name != "" {
						<h1 class="text-xl mb-4">{ props.Name }</h1>
					}
					{ children... }
				</div>
			</div>
		</body>
	</html>
}

templ SearchBar(searchContent string) {
	<div class="relative flex items-center w-full">
		@icon.Search(icon.Props{
			Class: "absolute left-3 text-muted-foreground",
			Size:  20,
		})
		@input.Input(input.Props{
			Type:        input.TypeSearch,
			Placeholder: "Search Movies...",
			Class:       "pl-10",
			Value:       searchContent,
			Name:        "q", // Add name attribute for form data
			Attributes: templ.Attributes{
				"hx-get":      "/search",
				"hx-trigger":  "keyup[key=='Enter']",
				"hx-target":   "body", // or wherever you want to replace content
				"hx-push-url": "true", // This updates the URL in browser
				"hx-include":  "this", // Include this input's value
			},
		})
	</div>
}

// Navigation item helper template
templ NavigationItem(href, label string, iconComponent templ.Component, isActive bool) {
	if isActive {
		@button.Button(button.Props{
			Variant: button.VariantDefault,
			Href:    href,
			Class:   "justify-start",
		}) {
			<div class="flex items-center gap-2">
				@iconComponent
				<span>{ label }</span>
			</div>
		}
	} else {
		@button.Button(button.Props{
			Variant: button.VariantGhost,
			Href:    href,
			Class:   "justify-start",
		}) {
			<div class="flex items-center gap-2">
				@iconComponent
				<span>{ label }</span>
			</div>
		}
	}
}

templ NavigationDrawer(title string, currentPath string) {
	@drawer.Header() {
		@drawer.Title(drawer.TitleProps{
			Class: "flex items-center gap-2 text-2xl font-semibold",
		}) {
			<img src="/static/favicon.svg" alt="App Logo" class="w-20 h-20"/>
			{ title }
		}
	}
	<div class="space-y-2 flex flex-col">
		@NavigationItem("/", "Home", icon.House(), currentPath == "/")
		@NavigationItem("/watched", "Watched", icon.Film(), currentPath == "/watched")
		@NavigationItem("/stats", "Stats", icon.ChartBarBig(), currentPath == "/stats")
	</div>
}

templ DrawerDefault(title, currentPath string) {
	@drawer.Content(drawer.ContentProps{
		Position: drawer.PositionLeft,
		ID:       "default-drawer",
	}) {
		@NavigationDrawer(title, currentPath)
	}
}

// scripts.templ
templ Scripts() {
	<script src="https://unpkg.com/htmx.org@2.0.4" integrity="sha384-HGfztofotfshcF7+8n44JQL2oJmowVChPTg48S+jvZoztPfvwD79OC/LTtG6dMp+" crossorigin="anonymous"></script>
	<script>
		document.body.addEventListener("htmx:afterSwap", (e) => {
			if (window.templUI) {
				for (const comp of Object.values(window.templUI)) {
					comp.init?.(e.detail.elt);
				}
			}
		});
		document.body.addEventListener("htmx:oobAfterSwap", (e) => {
			if (window.templUI) {
				for (const comp of Object.values(window.templUI)) {
					comp.init?.(e.detail.target);
				}
			}
		});
	</script>
	@ThemeScript()
	@drawer.Script()
	@input.Script()
}

templ ThemeScript() {
	<script>
	(() => {
	  const root = document.documentElement;
	  const saved = localStorage.getItem('theme');
	  const shouldBeDark = saved ? saved === 'dark' : true;
	  if (shouldBeDark) {
	    root.classList.add('dark');
	  }
	  window.toggleTheme = () => {
	    const isDark = root.classList.toggle('dark');
	    localStorage.setItem('theme', isDark ? 'dark' : 'light');
	  };
	})();
	</script>
}

templ Favicons() {
	<link rel="icon" type="image/svg+xml" href="/static/favicon.svg"/>
	<meta name="theme-color" content="#ffffff"/>
}
