package sidebar

import (
	"gowatch/internal/ui/templui/icon"
	"gowatch/internal/ui/templui/sidebar"
	"gowatch/internal/ui/templui/skeleton"
)

// Sidebar is the sidebar for the application. It manages state of the page using a script.
// Each menu item should make an htmx request to swap the main-content.
templ Sidebar(currentPage string, collapsed bool, watchedCount int) {
	@sidebar.Sidebar(sidebar.Props{
		ID:        "sidebar",
		Collapsed: collapsed,
	}) {
		@header()
		@sidebar.Content() {
			@sidebar.Group() {
				@sidebar.Menu() {
					@sidebar.MenuItem() {
						@sidebar.MenuButton(sidebar.MenuButtonProps{
							ID:       "test",
							Tooltip:  "Home",
							IsActive: currentPage == "home",
							Attributes: templ.Attributes{
								"data-page":    "home",
								"hx-get":       "/home",
								"hx-target":    "#main-content",
								"hx-swap":      "innerHTML",
								"hx-push-url":  "true",
								"hx-indicator": "#main-content-loading",
							},
						}) {
							@icon.House(icon.Props{Class: "size-4"})
							<span>Home</span>
						}
					}
					@sidebar.MenuItem() {
						@sidebar.MenuButton(sidebar.MenuButtonProps{
							Tooltip: "Watched",
							Attributes: templ.Attributes{
								"data-page":    "watched",
								"hx-get":       "/watched",
								"hx-target":    "#main-content",
								"hx-swap":      "innerHTML",
								"hx-push-url":  "true",
								"hx-indicator": "#main-content-loading",
							},
							IsActive: currentPage == "watched",
						}) {
							@icon.Film(icon.Props{Class: "size-4"})
							<span>Watched</span>
							@sidebar.MenuBadge() {
								{ watchedCount }
							}
						}
					}
				}
			}
		}
	}
}

templ header() {
	@sidebar.Header(sidebar.HeaderProps{
		Class: "flex flex-row items-center text-lg font-semibold leading-none tracking-tight gap-8",
	}) {
		<img src="/static/favicon.svg" alt="App Logo" class="w-20 h-20"/>
		Gowatch
	}
}

// SidebarLoading is just a sidebar without anything inside to show a loading state
templ SidebarLoading(collapsed bool) {
	@sidebar.Sidebar(sidebar.Props{
		Collapsed: collapsed,
	}) {
		@header()
		@sidebar.Content() {
			@sidebar.Group() {
				@sidebar.Menu() {
					// Home menu item skeleton
					@sidebar.MenuItem() {
						<div class="flex items-center gap-2 px-3 py-2">
							@skeleton.Skeleton(skeleton.Props{Class: "size-4"})
							if !collapsed {
								@skeleton.Skeleton(skeleton.Props{Class: "h-4 w-16"})
							}
						</div>
					}
					// Watched menu item skeleton
					@sidebar.MenuItem() {
						<div class="flex items-center gap-2 px-3 py-2">
							@skeleton.Skeleton(skeleton.Props{Class: "size-4"})
							if !collapsed {
								<div class="flex items-center justify-between flex-1 gap-2">
									@skeleton.Skeleton(skeleton.Props{Class: "h-4 w-20"})
									@skeleton.Skeleton(skeleton.Props{Class: "h-5 w-6 rounded-full"})
								</div>
							}
						</div>
					}
				}
			}
		}
	}
}
