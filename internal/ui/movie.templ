package ui

import (
	"fmt"
	"gowatch/internal/models"
	"gowatch/internal/ui/components/badge"
	"gowatch/internal/ui/components/button"
	"gowatch/internal/ui/components/card"
	"gowatch/internal/ui/components/icon"
	"gowatch/internal/ui/components/moviecard"
	"gowatch/internal/ui/components/page"
	"gowatch/internal/ui/components/separator"
	"sort"
	"strconv"
	"strings"
	"time"
)

templ MoviePageWithStats(movie models.MovieDetails, watchRecords models.WatchedMovieRecords) {
	@page.Page(page.Props{
		Title:       "Gowatch",
		CurrentPath: "/movie",
	}) {
		@movieHero(movie)
		@movieContent(movie, watchRecords)
	}
}

templ movieHero(movie models.MovieDetails) {
	<div class="relative -m-4 mb-6">
		if movie.Movie.BackdropPath != "" {
			@backdropHero(movie)
		} else {
			@fallbackHero(movie)
		}
		@separator.Separator()
	</div>
}

templ backdropHero(movie models.MovieDetails) {
	<div class="h-80 md:h-96 lg:h-[28rem]">
		<div class="absolute inset-0 bg-gradient-to-b from-black/50 via-black/30 to-transparent z-10"></div>
		<img
			src={ "https://image.tmdb.org/t/p/w1280" + movie.Movie.BackdropPath }
			alt={ movie.Movie.Title + " backdrop" }
			class="w-full h-full object-cover object-center"
		/>
		<div class="absolute inset-0 bg-gradient-to-t from-black/90 via-black/40 to-transparent z-10"></div>
		<div class="absolute inset-0 z-20 p-4 md:p-6 lg:p-8 flex flex-col justify-end">
			@heroContent(movie, true)
		</div>
	</div>
}

templ fallbackHero(movie models.MovieDetails) {
	<div class="p-6 md:p-8">
		@heroContent(movie, false)
	</div>
}

templ heroContent(movie models.MovieDetails, isDark bool) {
	<div class="flex flex-col lg:flex-row gap-6 lg:gap-8 items-start">
		@posterSection(movie, isDark)
		@movieInfo(movie, isDark)
	</div>
}

templ posterSection(movie models.MovieDetails, isDark bool) {
	if movie.Movie.PosterPath != "" {
		<div class={ "flex-shrink-0", templ.KV("hidden sm:block", isDark) }>
			<div class={ templ.KV("w-32 md:w-40 lg:w-48", isDark), templ.KV("w-32 md:w-40", !isDark) }>
				@moviecard.MovieCard(moviecard.Props{
					Title:      movie.Movie.Title,
					PosterPath: movie.Movie.PosterPath,
				})
			</div>
		</div>
	}
}

templ movieInfo(movie models.MovieDetails, isDark bool) {
	<div class="flex-1 min-w-0">
		<div class="mb-4">
			<h1
				class={
					"text-2xl md:text-3xl font-bold mb-2",
					templ.KV("lg:text-4xl text-white drop-shadow-lg", isDark),
					templ.KV("text-foreground", !isDark),
				}
			>
				{ movie.Movie.Title }
			</h1>
			<p
				class={
					"text-lg",
					templ.KV("md:text-xl text-white/90 drop-shadow-md", isDark),
					templ.KV("text-muted-foreground", !isDark),
				}
			>
				{ movie.Movie.ReleaseDate.Format("2006") }
			</p>
		</div>
		if movie.Tagline != "" {
			<p
				class={
					"text-sm md:text-base italic mb-4 lg:mb-6",
					templ.KV("text-white/90 drop-shadow-sm", isDark),
					templ.KV("text-muted-foreground", !isDark),
				}
			>
				"{ movie.Tagline }"
			</p>
		}
		@actionButtons()
	</div>
}

templ actionButtons() {
	<div class="flex flex-col sm:flex-row gap-3 sm:gap-4">
		@button.Button(button.Props{
			Variant: "default",
			Size:    "default",
		}) {
			@icon.Check()
			Mark as Watched
		}
		@button.Button(button.Props{
			Variant: "outline",
			Size:    "default",
		}) {
			@icon.Plus()
			Add to Watchlist
		}
	</div>
}

templ movieContent(movie models.MovieDetails, watchRecords models.WatchedMovieRecords) {
	<div class="space-y-8">
		@overviewSection(movie.Movie.Overview)
		@genresSection(movie.Genres)
		if len(watchRecords.Records) > 0 {
			@userActivitySection(watchRecords.Records)
		}
		@detailsSection(movie)
		@castSection(movie.Credits.Cast)
		@crewSection(movie.Credits.Crew)
	</div>
}

templ overviewSection(overview string) {
	if overview != "" {
		<div>
			<h2 class="text-xl font-semibold mb-4">Overview</h2>
			<p class="text-muted-foreground leading-relaxed">{ overview }</p>
		</div>
	}
}

templ genresSection(genres []models.Genre) {
	if len(genres) > 0 {
		<div>
			<h3 class="text-lg font-medium mb-3">Genres</h3>
			<div class="flex flex-wrap gap-2">
				for _, genre := range genres {
					@badge.Badge(badge.Props{Variant: "secondary"}) {
						{ genre.Name }
					}
				}
			</div>
		</div>
	}
}

templ detailsSection(movie models.MovieDetails) {
	<div>
		<h2 class="text-xl font-semibold mb-4">Details</h2>
		@card.Card() {
			<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
				@movieDetailItem("Release Date", movie.Movie.ReleaseDate.Format("January 2, 2006"))
				@movieDetailItem("Runtime", fmt.Sprintf("%d minutes", movie.Runtime))
				@movieDetailItem("Rating", fmt.Sprintf("%.1f/10 (%s votes)", movie.Movie.VoteAverage, formatNumber(movie.Movie.VoteCount)))
				@movieDetailItem("Original Language", movie.Movie.OriginalLanguage)
				if movie.Budget > 0 {
					@movieDetailItem("Budget", formatMoney(movie.Budget))
				}
				if movie.Revenue > 0 {
					@movieDetailItem("Revenue", formatMoney(movie.Revenue))
				}
				@movieDetailItem("Status", movie.Status)
				if movie.Homepage != "" {
					@homepageDetailItem(movie.Homepage)
				}
			</div>
		}
	</div>
}

templ movieDetailItem(label, value string) {
	<div class="space-y-1">
		<dt class="text-sm font-medium text-muted-foreground">{ label }</dt>
		<dd class="text-sm">{ value }</dd>
	</div>
}

templ homepageDetailItem(homepage string) {
	<div class="space-y-1">
		<dt class="text-sm font-medium text-muted-foreground">Homepage</dt>
		<dd class="text-sm">
			<a href={ templ.URL(homepage) } target="_blank" class="text-primary hover:underline">
				Visit Website
			</a>
		</dd>
	</div>
}

templ castSection(cast []models.Cast) {
	if len(cast) > 0 {
		<div>
			<h2 class="text-xl font-semibold mb-4">Cast</h2>
			<div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
				for i, member := range cast {
					if i < 9 {
						@castMemberCard(member)
					}
				}
			</div>
		</div>
	}
}

templ castMemberCard(cast models.Cast) {
	@card.Card() {
		<div class="flex items-center space-x-3 p-2">
			@profileImage(cast.Person.ProfilePath, cast.Person.Name)
			<div class="flex-1 min-w-0">
				<p class="text-sm font-medium truncate">{ cast.Person.Name }</p>
				<p class="text-xs text-muted-foreground truncate">{ cast.Character }</p>
			</div>
		</div>
	}
}

templ profileImage(profilePath, name string) {
	if profilePath != "" {
		<img
			src={ "https://image.tmdb.org/t/p/w185" + profilePath }
			alt={ name }
			class="w-12 h-12 rounded-full object-cover"
		/>
	} else {
		<div class="w-12 h-12 rounded-full bg-muted flex items-center justify-center">
			@icon.CircleUserRound()
		</div>
	}
}

templ crewSection(crew []models.Crew) {
	<div>
		<h2 class="text-xl font-semibold mb-4">Key Crew</h2>
		@card.Card() {
			<div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
				for _, member := range crew {
					if isKeyCrew(member.Job) {
						@crewMemberItem(member)
					}
				}
			</div>
		}
	</div>
}

templ crewMemberItem(crew models.Crew) {
	<div class="space-y-1">
		<dt class="text-sm font-medium text-muted-foreground">{ crew.Job }</dt>
		<dd class="text-sm font-medium">{ crew.Person.Name }</dd>
	</div>
}

templ userActivitySection(watchRecords []models.WatchedMovieRecord) {
	<div>
		<h2 class="text-xl font-semibold mb-4">Your Activity</h2>
		@card.Card() {
			<div class="space-y-6">
				@activityStats(watchRecords)
				@separator.Separator()
				@watchHistory(watchRecords)
			</div>
		}
	</div>
}

templ activityStats(records []models.WatchedMovieRecord) {
	<div class="grid grid-cols-2 md:grid-cols-4 gap-4">
		@activityStat("Times Watched", fmt.Sprintf("%d", len(records)))
		@activityStat("In Theater", fmt.Sprintf("%d", countTheaterWatches(records)))
		@activityStat("At Home", fmt.Sprintf("%d", len(records)-countTheaterWatches(records)))
		if len(records) > 0 {
			@activityStat("Last Watched", getLastWatchDate(records).Format("Jan 2006"))
		}
	</div>
}

templ activityStat(label, value string) {
	<div class="text-center">
		<div class="text-2xl font-bold text-primary">{ value }</div>
		<div class="text-xs text-muted-foreground">{ label }</div>
	</div>
}

templ watchHistory(records []models.WatchedMovieRecord) {
	<div>
		<h3 class="text-sm font-medium text-muted-foreground mb-3">Watch History</h3>
		<div class="space-y-2 max-h-48 overflow-y-auto">
			for _, record := range sortWatchRecordsDesc(records) {
				@watchHistoryItem(record)
			}
		</div>
	</div>
}

templ watchHistoryItem(record models.WatchedMovieRecord) {
	<div class="flex items-center justify-between py-2 px-3 rounded-lg bg-muted/50">
		<div class="flex items-center space-x-3">
			@watchLocationIcon(record.InTheaters)
			<div>
				<div class="text-sm font-medium">
					if record.InTheaters {
						Theater
					} else {
						Home
					}
				</div>
				<div class="text-xs text-muted-foreground">{ record.Date.Format("January 2, 2006") }</div>
			</div>
		</div>
		<div class="text-xs text-muted-foreground">
			{ formatTimeAgo(record.Date) }
		</div>
	</div>
}

templ watchLocationIcon(inTheaters bool) {
	if inTheaters {
		<div class="w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center">
			@icon.Popcorn(icon.Props{
				Size: 18,
			})
		</div>
	} else {
		<div class="w-8 h-8 rounded-full bg-secondary/10 flex items-center justify-center">
			@icon.House(icon.Props{
				Size: 18,
			})
		</div>
	}
}

// Helper functions
func formatMoney(amount int64) string {
	if amount == 0 {
		return "N/A"
	}
	switch {
	case amount >= 1000000000:
		return fmt.Sprintf("$%.1fB", float64(amount)/1000000000)
	case amount >= 1000000:
		return fmt.Sprintf("$%.1fM", float64(amount)/1000000)
	case amount >= 1000:
		return fmt.Sprintf("$%.1fK", float64(amount)/1000)
	default:
		return "$" + strconv.FormatInt(amount, 10)
	}
}

func formatNumber(num int64) string {
	str := strconv.FormatInt(num, 10)
	n := len(str)
	if n <= 3 {
		return str
	}

	var result strings.Builder
	for i, digit := range str {
		if i > 0 && (n-i)%3 == 0 {
			result.WriteString(",")
		}
		result.WriteRune(digit)
	}
	return result.String()
}

func countTheaterWatches(records []models.WatchedMovieRecord) int {
	count := 0
	for _, record := range records {
		if record.InTheaters {
			count++
		}
	}
	return count
}

func getLastWatchDate(records []models.WatchedMovieRecord) time.Time {
	if len(records) == 0 {
		return time.Time{}
	}

	latest := records[0].Date
	for _, record := range records[1:] {
		if record.Date.After(latest) {
			latest = record.Date
		}
	}
	return latest
}

func sortWatchRecordsDesc(records []models.WatchedMovieRecord) []models.WatchedMovieRecord {
	sorted := make([]models.WatchedMovieRecord, len(records))
	copy(sorted, records)

	sort.Slice(sorted, func(i, j int) bool {
		return sorted[i].Date.After(sorted[j].Date)
	})
	return sorted
}

func formatTimeAgo(t time.Time) string {
	now := time.Now()
	diff := now.Sub(t)

	switch {
	case diff < time.Hour:
		if minutes := int(diff.Minutes()); minutes < 1 {
			return "Just now"
		} else {
			return fmt.Sprintf("%dm ago", minutes)
		}
	case diff < 24*time.Hour:
		return fmt.Sprintf("%dh ago", int(diff.Hours()))
	case diff < 30*24*time.Hour:
		return fmt.Sprintf("%dd ago", int(diff.Hours()/24))
	case diff < 365*24*time.Hour:
		return fmt.Sprintf("%dmo ago", int(diff.Hours()/(24*30)))
	default:
		return fmt.Sprintf("%dy ago", int(diff.Hours()/(24*365)))
	}
}

func isKeyCrew(job string) bool {
	keyJobs := []string{"Director", "Producer", "Executive Producer", "Screenplay", "Writer"}
	for _, keyJob := range keyJobs {
		if job == keyJob {
			return true
		}
	}
	return false
}
