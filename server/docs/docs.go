// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/watched": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Movies"
                ],
                "summary": "Get all watched movies",
                "responses": {
                    "200": {
                        "description": "List of all watched movies (array may be empty)",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Movie"
                            }
                        }
                    },
                    "500": {
                        "description": "Server error while fetching watched movies",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Mark a movie as watched by providing a TMDB ID. If the movie doesn't exist in the database, it will be fetched from TMDB and created. If no date is provided, the current date is used.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Movies"
                ],
                "summary": "Mark a movie as watched",
                "parameters": [
                    {
                        "description": "Watched movie data (must include ` + "`" + `id` + "`" + ` as TMDB ID; optional ` + "`" + `date` + "`" + ` in YYYY-MM-DD format)",
                        "name": "watched",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Watched"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully marked movie as watched",
                        "schema": {
                            "$ref": "#/definitions/model.Watched"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or missing required ` + "`" + `id` + "`" + ` field",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error, database error, or TMDB API error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.Movie": {
            "type": "object",
            "properties": {
                "budget": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "imdb_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "original_language": {
                    "type": "string"
                },
                "overview": {
                    "type": "string"
                },
                "poster_path": {
                    "type": "string"
                },
                "release": {
                    "type": "string"
                },
                "revenue": {
                    "type": "integer"
                },
                "runtime": {
                    "type": "integer"
                },
                "vote_average": {
                    "type": "number"
                },
                "watched_date": {
                    "type": "string"
                }
            }
        },
        "model.Watched": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
